首先需要了解的：
	1、AnnotationConfigApplicationContext,这是spring为扩展注解而新增的一个类
	2、使用@Configuration注解代替配置文件applicationContext.xml
	3、使用@Bean注解代替<bean id="" class=""/>标签

 注解学习：
 一、@Import:通过导入的方式实现把实例加入Spring的IOC容器中,类似于在applicationContext.xml配置文件中使用<import resource=""/>
 	标签；
 	使用方式：
 		@Configuration
		@Import({Circular.class,Square.class})
		public class PolygonConfig {
		
		}
		但是对于Circular和Square类，在spring容器的中的beanName（名称）为全限定名称
		如果是通过@Configuration则在spring容器中的beanName为类名称的首字母小写
		@Bean是方法名称，也可以自定义名称
		
		@Import支持三种方式
			1、直接在后面填写Class就会将其加入到Spring的容器中
			2、通过自定义ImportSelector接口的实现类的方式
			3、通过自定义ImportBeanDefinitionRegistrar接口实现类的方式
-----------------------------------------------------------------------------------------------------------------------
二、@Conditional注解：可以根据一些自定义的条件动态的选择是否加载该bean到spring容器中去，而且@Conditional注解在springboot中大量使用
	@Conditional注解可以标注在类上，也可以标注在方法上
	可以通过实现Condition接口，然后定义业务条件，进行选择是否将对应的实例加载到spring容器中去
	
	public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
		//获取当前的系统环境（Windows 7）
		Environment env = context.getEnvironment();
		String system = env.getProperty("os.name");
		System.out.println("当前的系统环境为:"+system);
		if("Windows 72".equals(system)) {
			return true;
		}
		return false;
	}
----------------------------------------------------------------------------------------------------------------------------
三、@PropertySource注解：结合@Value一起使用
--------------------------------------------------------------------------------------------

四、@ComponentScan注解，就是将配置<context:component-scan package="" use-default-filters=""/>使用注解替代

	@ComponentScan(basePackages= {"com.richy.spring.componentscan"},useDefaultFilters=false,
	includeFilters= {
		@Filter(type=FilterType.ANNOTATION,value= {Controller.class}),
		@Filter(type=FilterType.CUSTOM,value= {ServiceFilter.class})
	})
	跟下面使用标签的方式：
	<context:component-scan package="com.richy.spring.componentscan" use-default-filters="false">
		<context:include-filter type="ANNOTATION" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="CUSTOM" expression="com.richy.spring.annotaion.FyRichy"/>
	</context:component-scan>

-----------------------------------------------------------------------------------------------------------------











