2019年3月13日：
  	源码解析spring中的AnnotationConfigApplicationContext关于注解的扩展类；
  	在类ClassPathXmlApplicationContext和AnnotationConfigApplicationContext类中都有refresh()方法，中间会初始化很多的组件
 	其中就有invokeBeanFactoryPostProcessors(beanFactory)方法，我们就以这个方法为入口，看看源码中对于BeanFactoryPostProcessor
 	做了什么。
 
 一、分析BeanFactory容器的扩展类AnnotationConfigApplicationContext
 	通过AnnotationConfigApplication aca = new AnnotationConfigApplicationContext(AopConfig.class);
 	进入AnnotationConfigApplicationContext的构造方法：
 	1、执行this()方法：
 		步骤：执行this()进入无参构造方法中，
 		public AnnotationConfigApplicationContext() {
			this.reader = new AnnotatedBeanDefinitionReader(this);
			this.scanner = new ClassPathBeanDefinitionScanner(this);
		}
		分析无参构造方法中所做的事：
			a、this.reader = new AnnotatedBeanDefinitionReader(this);
			该方法定位到AnnotatedBeanDefinitionReader构造方法中，其中有一个AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);
			就是为DefaultListableBeanFactory事先注册一些组件，比如我们在后面要用到的invokeBeanFactoryPostProcessors(beanFactory)中要用到的
			ConfigurationClassPostProcessor类就是在这里进行注册，该类事先了BeanFactoryPostProcessor接口，在postProcessBeanDefinitionRegistry()方法中
			定义了将标注有@Configuration,@Import,@PropertValue,@Bean....注册到Spring容器中去，以及通过注解@ComponentScan标注的packages包下面的标注有
			@Component类，或者标注@Controller，@Service，@Reposity，的类注册到Spring容器中去（这些注解的元注解是@Component，所以也会被注册到Spring容器中去，
			在【b】步骤中将分析@ComponentScan扫描的包下面的哪些类会被注册到Spring容器中去）；
			本次事先注册好的组件有：
			-----------------------------------------------------------------容器刚开始初始化的主键有-------------------------------------------------------------------------------
				org.springframework.context.annotation.internalConfigurationAnnotationProcessor = org.springframework.context.annotation.ConfigurationClassPostProcessor
				org.springframework.context.event.internalEventListenerFactory= org.springframework.context.event.DefaultEventListenerFactory
				org.springframework.context.event.internalEventListenerProcessor = org.springframework.context.event.EventListenerMethodProcessor
				org.springframework.context.annotation.internalAutowiredAnnotationProcessor = org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor 
				org.springframework.context.annotation.internalCommonAnnotationProcessor=org.springframework.context.annotation.CommonAnnotationBeanPostProcessor
				org.springframework.context.annotation.internalRequiredAnnotationProcessor=org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor
			-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			
			b、this.scanner = new ClassPathBeanDefinitionScanner(this);
			该方法定义了通过注解@ComponentScan扫描的被哪些注解标注的类会被注册到Spring容器中去
				①、this.includeFilters.add(new AnnotationTypeFilter(Component.class));
				被@Component标注的类，或者元注解是@Componet的类，其中@Controller，@Service，@Reposity这写注解标注过的类的元注解就是@Component
				②、this.includeFilters.add(new AnnotationTypeFilter(
					((Class<? extends Annotation>) ClassUtils.forName("javax.annotation.ManagedBean", cl)), false));
				③、this.includeFilters.add(new AnnotationTypeFilter(
					((Class<? extends Annotation>) ClassUtils.forName("javax.inject.Named", cl)), false));
 	
 	2、执行register(annotatedClasses)方法：
 		步骤：
 		a、方法：AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);通过传入的beanClass，
 		      创建一个AnnotatatedGennericBeanDefinition对象
 		  AnnotatatedGennericBeanDefinition
 			属性1、beanClass：class com.richy.spring.aop.AopConfig
 			属性2、metadata：StandardAnnotationMetadata对象：
 				包含属性：
 				属性1、introspectedClass：--->class com.richy.spring.aop.AopConfig
 				属性2、annotations:也就是标注在传入类上面的所有的注解：
 					[@org.springframework.context.annotation.Configuration(value=),
 					 @org.springframework.context.annotation.EnableAspectJAutoProxy(exposeProxy=false, proxyTargetClass=false)]
 					 
 		b、封装成为BeanDefinitionHolder对象：
 			BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(abd, beanName);
 				属性1、beanName:aopConfig
 				属性2、上面创建好的 AnnotatedGennericBeanDefinition对象
 		
 		c、BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, this.registry);
 			通过registry（DefaultListableBeanFactory）将通过传入的类生成好的BeanDefinitionHolder对象注册到Spring容器中
 	
 		d、总结：
 			AnnotationConfigApplication aca = new AnnotationConfigApplicationContext(AopConfig.class);
 			在构造方法中通过调用方法，register(annotatedClasses);将传入的类注册到Spring容器中
 			
 	3、执行refresh()方法里面的invokeBeanFactoryPostProcessors(beanFactory)方法：
 		该方法称为是注册并执行BeanFactory的后置处理器
 		步骤：
=========================================================================================================================
 		详解invokeBeanFactoryPostProcessor(beanFactory)方法：
-------------------------------------------------------------------------------------------------------------------------
public static void invokeBeanFactoryPostProcessors(
			ConfigurableListableBeanFactory beanFactory, List<BeanFactoryPostProcessor> beanFactoryPostProcessors) {
 		
 		//processedBeans用户存储已经执行过【postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry)】
 		//或者执行过postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)方法的类的beanName
		Set<String> processedBeans = new HashSet<String>();
		
		//先判断beanFactory是不是BeanDefinitionRegistry类型，这里的beanFactory
		//是DefaultListableBeanFactory类型实现了BeanDefinitionRegistry接口
		if (beanFactory instanceof BeanDefinitionRegistry) {
			BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;
			
			//regularPostProcessors用来存储BeanFactoryPostProcessor接口的实现类
			List<BeanFactoryPostProcessor> regularPostProcessors = new LinkedList<BeanFactoryPostProcessor>();
			
			//用来存储BeanDefinitionRegistryPostProcessor接口的实现类
			List<BeanDefinitionRegistryPostProcessor> registryPostProcessors =
					new LinkedList<BeanDefinitionRegistryPostProcessor>();
			//这里遍历手动注册的BeanFactoryPostProcessor【如何手动添加BeanFactoryPostProcessor??】
			for (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) {
				//是否是BeanDefinitionRegistryPostProcessor
				if (postProcessor instanceof BeanDefinitionRegistryPostProcessor) {
					BeanDefinitionRegistryPostProcessor registryPostProcessor =
							(BeanDefinitionRegistryPostProcessor) postProcessor;
					//先去执行postProcessBeanDefinitionRegistry方法
					registryPostProcessor.postProcessBeanDefinitionRegistry(registry);
					//缓存起来
					registryPostProcessors.add(registryPostProcessor);
				}
				else {
					//如果不是BeanDefinitionRegistryPostProcessor类型直接缓存
					regularPostProcessors.add(postProcessor);
				}
			}
 
			//在spring容器中得到BeanDefinitionRegistryPostProcessor类型的postProcessorName
			String[] postProcessorNames =
					beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);
 
			//存储实现了priorityOrdered接口的类是个空接口，但是它实现了Ordered接口，里面有个getOrder()方法，根据返回值进行排序，正序排列
			//优先级高的值小(Integer.MIN_VALUE(0x80000000))，优先级低的值大(Integer.MAX_VALUE(0x7fffffff) )
			List<BeanDefinitionRegistryPostProcessor> priorityOrderedPostProcessors = new ArrayList<BeanDefinitionRegistryPostProcessor>();
			for (String ppName : postProcessorNames) {
				//如果确实实现了PriorityOrdered接口
				if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {
					//写入存储器
					priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));
					//存储name表示已经执行实现类中的方法
					processedBeans.add(ppName);
				}
			}
			//排序（根据getOrder()方法的返回值正序排列）
			sortPostProcessors(beanFactory, priorityOrderedPostProcessors);
			
			//registryPostProcessors中存储所有的priorityOrderedPostProcessors
			//存放在registryPostProcessors里面是因为还要执行BeanFactoryPostProcessor中的postProcessBeanFactory()
			//方法，因为invokeBeanDefinitionRegistryPostProcessors只是执行postProcessBeanDefinitionRegistry()
			//而BeanDefinitionRegistryPostProcessors接口继承了BeanFactoryPostProcessor
			registryPostProcessors.addAll(priorityOrderedPostProcessors);
			
			//执行postProcessBeanDefinitionRegistry()方法
			invokeBeanDefinitionRegistryPostProcessors(priorityOrderedPostProcessors, registry);
 			
 			//再次获取BeanDefinitionRegistryPostProcessor类型的实类的beanName
			postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);
			//存储实现了Ordered接口的类
			List<BeanDefinitionRegistryPostProcessor> orderedPostProcessors = new ArrayList<BeanDefinitionRegistryPostProcessor>();
			for (String ppName : postProcessorNames) {
				//processedBeans不包括表示没有执行并且确实实现了Ordered
				if (!processedBeans.contains(ppName) && beanFactory.isTypeMatch(ppName, Ordered.class)) {
					//存储
					orderedPostProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));
					//存储name表示已经执行
					processedBeans.add(ppName);
				}
			}
			//三步，排序，存储，执行
			sortPostProcessors(beanFactory, orderedPostProcessors);
			registryPostProcessors.addAll(orderedPostProcessors);
			invokeBeanDefinitionRegistryPostProcessors(orderedPostProcessors, registry);
 
			//下面是既没有实现Ordered接口也没有实现PriorityOrdered接口的逻辑
			boolean reiterate = true;
			while (reiterate) {
				reiterate = false;
				postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);
				for (String ppName : postProcessorNames) {
					if (!processedBeans.contains(ppName)) {
						BeanDefinitionRegistryPostProcessor pp = beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class);
						registryPostProcessors.add(pp);
						processedBeans.add(ppName);
						pp.postProcessBeanDefinitionRegistry(registry);
						reiterate = true;
					}
				}
			}
 
			//执行registryPostProcessors中对象的postProcessBeanFactory方法
			invokeBeanFactoryPostProcessors(registryPostProcessors, beanFactory);
			//执行regularPostProcessors中对象的postProcessBeanFactory方法
			invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);
		}
 
		else {
			invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);
		}
 
		//在spring容器中得到BeanFactoryPostProcessor类型的postProcessorName
		//这里如果自定义BeanFactoryPostProcessor，就会被获取到
		String[] postProcessorNames =
				beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false);
 
		//和BeanDefinitionRegistryPostProcessor逻辑一样这里不多说
		List<BeanFactoryPostProcessor> priorityOrderedPostProcessors = new ArrayList<BeanFactoryPostProcessor>();
		List<String> orderedPostProcessorNames = new ArrayList<String>();
		List<String> nonOrderedPostProcessorNames = new ArrayList<String>();
		for (String ppName : postProcessorNames) {
			//表示在上面已经执行过了【不做处理】
			if (processedBeans.contains(ppName)) {
				// skip - already processed in first phase above
			}
			//表示实现了PriorityOrdered接口的BeanFactoryPostProcessor类型的实现类
			else if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {
				priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));
			}
			//表示实现了Ordered接口的BeanFactoryPostProcessor类型的实现类
			else if (beanFactory.isTypeMatch(ppName, Ordered.class)) {
				orderedPostProcessorNames.add(ppName);
			}
			else {
				//只有实现BeanFactoryPostProcessor类型的实现类
				nonOrderedPostProcessorNames.add(ppName);
			}
		}
 		
 		//进行排序
		sortPostProcessors(beanFactory, priorityOrderedPostProcessors);
		
		//执行实现了PriorityOrdered接口的BeanFactoryPostProcessor的postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)方法
		invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);
		
		List<BeanFactoryPostProcessor> orderedPostProcessors = new ArrayList<BeanFactoryPostProcessor>();
		for (String postProcessorName : orderedPostProcessorNames) {
			orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));
		}
		//进行排序
		sortPostProcessors(beanFactory, orderedPostProcessors);
		
		//执行实现了Ordered接口的BeanFactoryPostProcessor的postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)方法
		invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);
 
		//执行
		List<BeanFactoryPostProcessor> nonOrderedPostProcessors = new ArrayList<BeanFactoryPostProcessor>();
		for (String postProcessorName : nonOrderedPostProcessorNames) {
			nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));
		}
		
		//BeanFactoryPostProcessor的postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)方法
		//自定义的MyBeanFactoryPostProcessor implements BeanFactoryPostProcessor
		//的postProcessBeanFactory将在这里被执行
		invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);
		
		//清除缓存中的bean的定义，因为在BeanDefinitionRegistryPostProcessor和BeanFactoryPostProcessor
		//中可能会修改bean的原始元数据，例如 替换值中的占位符
		beanFactory.clearMetadataCache();
	}
-------------------------------------------------------------------------------------------------------------------------
 
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	
 	